{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Overview","text":"<p>In this mini session we'll go through the basics of Git and GitHub. </p>"},{"location":"#before-the-tutorial","title":"Before the tutorial","text":"<ul> <li> <p>You should have ideally created a GitHub Account, click here to create one now if not </p> </li> <li> <p>You can also setup 2 factor authentication for your GitHub account which is recommended. I like to use the Google Authenticator app to do this but there are many other viable options. </p> </li> </ul>"},{"location":"#during-the-tutorial-well-switch-back-and-forth-between","title":"During the tutorial we'll switch back and forth between","text":"<ol> <li>A powerpoint presentation.</li> <li>A hands on session where we can refer to this document for tips and some code blocks that we can copy-paste.</li> </ol> <p>We'll begin with the powerpoint.</p>"},{"location":"#after-the-tutorial","title":"After the tutorial","text":"<p>The best way to get comfortable with Git and GitHub is to start using them. Try it out on an existing or new project. </p> <p>I can also very strongly recommend (as I took it a while ago) this tutorial on Git and GitHub from CodeRefinery. These are run occasionally in Uppsala (click here to see upcoming CodeRefinery events). It's much more thorough than this as well. </p> <p>This book (available online and free) is essentially the ultimate resource for Git. </p>"},{"location":"appendix/","title":"Appendix","text":""},{"location":"appendix/#practical-tips","title":"Practical Tips:","text":"<ol> <li> <p>Where do I store my projects?      I have a folder called projects close to the root folder of my pc. All projects get there own folder.      </p> </li> <li> <p>Undoing things tutorial</p> </li> <li> <p>Use GitHub or something like VSCode to create your initial repository rather than Git directly. This will give you the chance to add things like .gitignore files and a License file.</p> </li> <li> <p>Use a .gitignore file to handle large data files or sensitive files that you don't want to include but are a part of your project. (As we saw, these can be created automatically when you make a repository with GitHub or VSCode, with good defaults for a project involving for example: python or R).</p> </li> <li> <p>Commit regularly, it will make your life easier. </p> </li> </ol>"},{"location":"appendix/#other-ways-to-share-research-data","title":"Other Ways to Share Research Data","text":"<ul> <li> <p>Raw research data, associated with a paper, especially large data files are probably better shared using a service like Zenodo.</p> </li> <li> <p>There is nothing wrong with having both a GitHub and Zenodo repository for your project.</p> </li> </ul>"},{"location":"appendix/#github-alternatives","title":"GitHub Alternatives","text":"<p>As you hopefully now appreciate, you don't need to use GitHub to make use of Git. Alternative places to host remote repositories include for example bitbucket and GitLab and they tend to offer very similar functionality.</p>"},{"location":"part1/","title":"Part 1, Git","text":"<p>As we have now seen in the powerpoint, Git is a version control system used to track changes in source code (or other files). It enables multiple people to work on the same project simultaneously and (somewhat) independently.</p>"},{"location":"part1/#part-11-install-git-and-create-a-github-account","title":"Part 1.1 - Install Git and Create a GitHub Account","text":"<p>useful links:</p> <ul> <li>Download git - select the right option for your OS.</li> <li>Sign up to GitHub</li> </ul>"},{"location":"part1/#part-12-set-up-git","title":"Part 1.2 - Set up Git","text":"<p>Now we'll set some default settings for git, open up git in the command line and add these code blocks.</p> <p>Recommendation: Set your user.name to your github user name, and do not use spaces. <pre><code>git config --global user.name \"Your_User_Name\"\n</code></pre></p> <p>Recommendation: Set your user.email to: \"[your git hub user name]@users.noreply.github.com\". <pre><code>git config --global user.email yourname@example.com\n</code></pre></p> <pre><code>git config --global init.defaultBranch main\n</code></pre> <p>Optional extra setting:</p> <p>Set the default text editor to use with git. You'll make use of this text editor when you for example write commit messages. I like to use vscode (you'll need to have it installed), you can choose something else or skip this step if you like. Take a look here for some example editors you could use. <pre><code>git config --global core.editor \"[your text editor here] -w\"\n</code></pre></p> <p>By adding the <code>-w</code> flag we tell Git to wait for you to write your commit message in your code editor.</p> <p>You can confirm these commands worked by doing:</p> <p><code>git config --list --show-origin</code></p> <p>You should need see your settings added. </p>"},{"location":"part1/#part-13-create-a-new-git-repository","title":"Part 1.3 - Create a New Git Repository","text":"<p>Now we'll create a local Git repository to get a feel for how things work:</p> <p>First, we'll make a folder for our recipe and then initiate the repository:</p> <pre><code>mkdir recipe\ncd recipe\ngit init -b main\n</code></pre> <p>Note: The \"-b\" flag in the git init command is short for: \"--initial-branch\". We set this to main. This is a standard (you may also see \"master\") sometimes. You don't have to set your initial branch to either of these names, but you should.</p> <p>Now run:</p> <pre><code>git status\n</code></pre> <p>This command gives a report on the current status of our repository. Think back to the picture we saw in the presentation:</p> <p> <sub><sup>Image from the Pro Git Book: https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F</sup></sub></p> <p>The git status command will tell us where our different files are at in these steps. Of course, right now we have no files.</p>"},{"location":"part1/#part-14-make-our-first-commit","title":"Part 1.4 - Make our First Commit","text":"<p>Lets make a file inside our folder called \"the_best_programming_language.txt\" and add your favorite programming language inside the file.</p> <p>Run the <code>git status</code> command again, what's changed?</p> <p>Go one step further and stage the change using \"git add\":</p> <pre><code>git add the_best_programming_language.txt\n</code></pre> <p>Now run the <code>git status</code> command again, what stage is the file at now?</p> <p>Finally, lets commit the file using:</p> <pre><code>git commit\n</code></pre> <p>Or</p> <pre><code>git commit -m \"Added a file on the best programming language in the world\" \n</code></pre> <p>The -m stands for message, and is the message you write to explain your commit, (i.e., what files have you added and what have you done with them).</p> <ul> <li>What do you see now if you run git status one more time?</li> </ul> <p>Recap: the commands we've seen so far are:</p> <ul> <li><code>git status</code> : report</li> <li><code>git add [files to add]</code> add file(s) to the staging area</li> <li><code>git commit</code> commit the files from staging area.</li> </ul>"},{"location":"part1/#part-15-make-our-2nd-and-3rd-commits","title":"Part 1.5 - Make our 2nd and 3rd Commits","text":"<p>Now, lets make two new commits, use git status as often as you need to check your on the right track.</p> <ol> <li> <p>For the first new commit, lets create a file called \"top_3_animals.txt\" and add only your favorite animal to the file. Add this file, commit it and make sure your commit message includes an explanation for what you've done.</p> </li> <li> <p>For the second commit, update the file called \"top_3_animals.txt\" to add the remaining two animals to the file.</p> </li> </ol>"},{"location":"part1/#part-16-looking-at-the-commit-history","title":"Part 1.6 - Looking at the Commit History","text":"<p>We can use the <code>git log</code> command to see the commits made to the repository (in reverse order). Each commit has a hash which provides a unique label for the commit.</p> <p>Test out the following versions of <code>git log</code>:</p> <pre><code>git log # standard\ngit log --oneline # summary version\ngit log --stat # more detailed\n</code></pre> <p>Note: Git has a lot of functionality to compare commits (see how the files have changed between commits) or files waiting to be committed (see command: <code>git diff</code>). That said, it's normally easier to do this in your code editor, so we'll skip it for now, click here for a tutorial on it.</p>"},{"location":"part1/#part-17-good-commit-messages","title":"Part 1.7 - Good Commit Messages","text":"<p>An example good commit message:</p> <pre><code>Change plot line colours for all graphs\n\nChange performed because prior color palette was bad for color blind people.\nSome other useful thing to know for someone else/future you. \n</code></pre> <p>The top line is the title of the commit and should provide a quick summary. Then there is a blank line before the message body which provides more details if useful (some commits don't need a body). You don't need to include things like the names of the files you've changed as it's already stored in the commit, see for example: <code>git log --stat</code>.</p> <p>You can read more about good commit messages here.</p>"},{"location":"part1/#part-18-summary-so-far","title":"Part 1.8 - Summary so far:","text":"<p>You saw after setup we used the same set of commands repeatedly to make commits:</p> <pre><code>git status\ngit add [files to add]\ngit commit\n</code></pre> <p>When working on just a local repository by yourself this is pretty much all you need. </p> <p>The next powerpoint will focus on how to incorporate GitHub (a remote repository) into our workflow.</p> <p>Back to the powerpoint...</p>"},{"location":"part2/","title":"Part 2, GitHub and Git Combined","text":""},{"location":"part2/#part-21-make-it-easy-to-connect-with-github-via-git","title":"Part 2.1, Make it easy to connect with GitHub via Git","text":"<p>To do this we'll follow a short pre-existing tutorial on exactly that.. Follow the steps for SSH setup.</p>"},{"location":"part2/#part-22-make-a-new-repository-with-github","title":"Part 2.2, Make a new repository with GitHub","text":"<p>Using GitHub to create the repository can be quite useful as you can get some useful files for free:</p> <ul> <li>README - this will be displayed on the front page of the repository making it a great place to provide a summary of the project. </li> <li>.gitignore - Language specific .gitignore files with plenty of file extensions you wont want to upload to GitHub already defined for you. </li> <li>License - A license file for your project (if you're not sure what license to pick when you create the code, you can always add it later).</li> </ul> <p>Now use github to make a new repository, make sure to add a README file, .gitignore (specific for the programming language you use) and License (don't worry about which one you pick).</p> <p>Once made, it should look like something like this: </p> <p>Note that we can upload files and edit files directly with GitHub.</p>"},{"location":"part2/#part-23-make-a-commit-on-github","title":"Part 2.3, Make a commit on GitHub","text":"<p>It's quite rare to do this (perhaps except for updating README files), but lets use GitHub to make a commit.</p> <p>We'll update the README with some more text. Click on the README file and then click on the pencil in the top left corner of the document to enter edit mode.</p> <p>The README file is a markdown file, with extension \".md\". This allows you to easily format the document, see this GitHub guide on markdown. Fun fact, The document you're reading right now was written in markdown.</p> <p>Task: Update the README on GitHub with some markdown formatted content, include things like some bullet points, an extra title and some text in bold. Use this markdown guide from GitHub to help you if you don't know the syntax. </p> <p>Tip: Regularly swap between the edit and preview modes to check you're formatting correctly.</p>"},{"location":"part2/#part-24-make-a-local-copy-of-the-github-repo","title":"Part 2.4, Make a local copy of the GitHub Repo","text":"<p>As we covered in the powerpoint, the GitHub repository is a \"remote\" version of the project.</p> <p>To make a local copy we'll need to clone it. Use the SSH option that we setup in Part 2.1</p> <p></p> <p>Then in a terminal do:</p> <pre><code>git clone [repository to clone, copied from the picture above]\ncd test-repo\nls -alh\n</code></pre> <p>If you get a error about SSH keys not being setup, go back to the tutorial on Step 2.1 and make sure it is setup correctly (ask for help if unsure). By running the <code>ls -alh</code> command we can see the files in this newly created folder include a <code>.git</code> folder. We can also run a <code>git status</code> command to see the current state of the repository.</p> <p>Finally if we run the command:</p> <pre><code>git remote -v\n</code></pre> <p>You should see something like:</p> <pre><code>origin  git@github.com:RMCrean/test-repo.git (fetch)\norigin  git@github.com:RMCrean/test-repo.git (push)\n</code></pre> <p>This essentially means we have the ability to push and pull (for now think of \"pull\" and \"fetch\" as the same) commits from our local repo to our remote repo on GitHub. Let's do that.</p>"},{"location":"part2/#part-25-push-a-local-change-to-the-remote-repository","title":"Part 2.5, Push a Local Change to the Remote Repository","text":"<p>Now we'll make a local commit and push this change to the remote repository on GitHub. Follow the same steps as you did for Part 1 (create/update file, add files to staging area, commit files). Once you're done run <code>git status</code>, you'll see something along these lines:</p> <pre><code>On branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n</code></pre> <p>Here origin/main refers to the remote (GitHub). As the message implies, we have changes (commits) we can \"push\" to GitHub. To do that run:</p> <pre><code>git push\n</code></pre> <p>Go take a look at the repository on GitHub, you should see the new changes now added.</p>"},{"location":"part2/#part-26-make-a-remote-commit-and-pull-to-update-the-local-repository","title":"Part 2.6, Make a Remote Commit and \"Pull\" to Update the Local Repository","text":"<p>Now lets do the reverse. Go to main page of your new GitHub repo and click on add file and either upload or add a new file directly.</p> <p>Now if we run <code>git status</code> in our local repository it should say we are 1 commit behind, but instead what do we see?</p> Spoiler We see we're up to date. So the changes on the remote aren't yet known about on our local repository.  <p>To check for changes on the remote repository we need to first run:</p> <pre><code>git remote update\n</code></pre> <p>After this <code>git status</code> will correctly tell us we are 1 commit behind and we can pull the change using:</p> <pre><code>git pull\n</code></pre> <p>Now our local and remote versions are up to date again.</p>"},{"location":"part2/#part-2-summary","title":"Part 2 - Summary:","text":"<p>You saw after setting up the remote and local repositories we used the same 2 commands on top of the ones we already learned:</p> <pre><code>git status # old\ngit add [files_to_add] # old\ngit commit # old\ngit push # new\ngit pull # new \n</code></pre> <p>For projects that you work on alone, that's not too far from the truth once you're setup. </p> <p>Back to the powerpoint...</p>"},{"location":"part3/","title":"Part 3, Branches and Merging","text":""},{"location":"part3/#hands-on-session-part-3-branches-and-merging","title":"Hands on Session - Part 3, Branches and Merging","text":"<ul> <li> <p>Branch Branching lets you have different versions of a repository at one time. By default, your repository has one branch named <code>main</code> (sometimes called <code>master</code> instead) that is considered to be the definitive/central branch. Typically a new branch is used to work on new features or bug fixes without affecting the main codebase until you are ready to merge the changes.</p> </li> <li> <p>Merge Merging combines changes from different branches into a single branch, typically changes are merged into the <code>main</code> branch.</p> </li> </ul> <p> <sub><sup>Image taken from coderefinery: https://coderefinery.github.io/git-intro/branches/ </sup></sub></p>"},{"location":"part3/#part-31-create-a-new-branch","title":"Part 3.1, Create a New Branch:","text":"<p>Now we'll create a new branch inside our repository. </p> <pre><code>git branch new-feature main\n</code></pre> <p>This means we'll create a new branch called <code>new-feature</code> using a copy of the current state of the <code>main</code> branch. </p> <p>Now if we run: <pre><code>git branch \n</code></pre></p> <p>We'll see two branches, and the branch we are working on (main) indicated by an asterisk.</p> <p>To swap to the other branch we can do: </p> <pre><code>git checkout new-feature\n</code></pre> <p>If you now run <code>git branch</code> again, you'll now see we're working in the <code>new-feature</code> branch. </p> <p>Tip: you can combine the creation of a new branch and swapping to the branch is a single step:</p> <pre><code>git checkout -b new-feature main\n</code></pre>"},{"location":"part3/#part-32-make-a-commit-in-the-new-branch-and-merge-them","title":"Part 3.2, Make a Commit in the New Branch and Merge them.","text":"<p>Add a new file and commit this file to the new branch. </p> <p>Tip: Make sure you're working in the <code>new-feature</code> branch, you can check by typing: <code>git branch</code>.</p> <p>Once you've made the commit, we first swap back to the <code>main</code> branch:</p> <pre><code>git checkout main\n</code></pre> <p>Then we merge the <code>new-feature</code> branch into the <code>main</code> branch: </p> <pre><code>git merge new-feature\n</code></pre> <p>At this point you should see the new file you created inside the main branch. You can also safely delete the <code>new-feature</code> branch (recommended, otherwise you'll end up with a large number of branches after a while which can be confusing).</p> <pre><code>git branch -d new-feature\n</code></pre> <p>If you run <code>git branch</code> now you should see the <code>new-feature</code> branch no longer exists. </p>"},{"location":"part3/#part-33-merge-two-branches-using-a-github-pull-request","title":"Part 3.3, Merge Two Branches Using a GitHub Pull Request","text":"<p>Now we'll repeat essentially the same process but this time instead of using the merge command in Git, we'll use GitHub's pull request feature instead.</p> <ol> <li>Create the new branch and switch to it: </li> </ol> <pre><code>git checkout -b new-feature-pull main\n</code></pre> <ol> <li> <p>Add a new file, commit the file, making sure you're in the <code>new-feature-pull</code> repository. </p> </li> <li> <p>Push the new file to the remote repository. </p> </li> </ol> <p>Note that if we try to use just <code>git push</code> it wont work, instead we'll need to do:</p> <pre><code>git push -u origin new-feature-pull\n</code></pre> <p>It's not important right now to understand but the <code>-u</code> is short for <code>--set-upstream</code> option, which essentially sets up our <code>git pull</code> or <code>git push</code> commands for this new branch.</p> <p>Now head over to GitHub and go to the main page of your repository, where you should see a message like this: </p> <p>If we click to \"compare and pull\" we can start the pull request process. </p> <p>This is best shown on the board, so I'll show this at the time and we can follow along. To revise the topic later on you can click here for a nice guide/tutorial</p> <p>Once the pull request is successful we can go ahead and delete the old branch, you could do this on Git (as we saw in Part 3.2) or on GitHub. </p> <p>This is typically how you merge branches when working with others. You can also use this method when working alone. </p>"},{"location":"part3/#end-of-session","title":"End of Session","text":"<p>We've now gone through the basics of Git and GitHub. Several topics weren't covered in this session. Including dealing with merge conflicts and how to undo things. That said, you should have enough to get started. See the Intro and Appendix for some good sources to learn from.  </p>"}]}